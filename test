{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMKzAATnWsaSZ9tKRyL1wsl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NUnameless/NUnameless/blob/main/%EC%A7%84%EC%A7%9C_%EC%B0%90%E3%84%B9%E3%85%87%EB%A7%88%EC%A7%80%EB%A7%89.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QZVAPBTLJyy6",
        "outputId": "2ef71d5b-712c-4579-a9b0-abbf1c6431f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WP6-M6EeJbci",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 781
        },
        "outputId": "f5a6431d-5deb-48b5-875a-3e9a1b52e59f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "WARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-ea6a2e015424>:13: DtypeWarning: Columns (3,4,5,7,12) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  train_data = pd.read_csv('/content/drive/MyDrive/boom_final.csv')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "데이터 개수: 73335\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "리뷰 처리 중: 100%|██████████| 73335/73335 [00:07<00:00, 9799.07it/s] \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.font_manager as fm\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "from tqdm import tqdm\n",
        "\n",
        "!apt -qq -y install fonts-nanum > /dev/null\n",
        "\n",
        "\n",
        "# 데이터 불러오기\n",
        "train_data = pd.read_csv('/content/drive/MyDrive/boom_final.csv')\n",
        "print('데이터 개수:', len(train_data))\n",
        "\n",
        "# 문자열이 아닌 데이터 제거\n",
        "train_review = train_data['댓글'].dropna().map(str)\n",
        "\n",
        "\n",
        "# 문자열이 아닌 데이터를 모두 제거한 후 numpy 배열로 변환합니다.\n",
        "train_review = np.array([review for review in train_data['댓글'] if type(review) is str])\n",
        "\n",
        "# 불용어 목록 파일을 불러옵니다.\n",
        "with open('/content/drive/MyDrive/stopword_main.txt', 'r', encoding='utf-8') as f:\n",
        "    stopwords = np.array([line.strip().replace('\\r', '') for line in f.readlines()])\n",
        "\n",
        "# 불용어를 제거하고, 대소문자 및 특수문자 처리합니다. (리스트 컴프리헨션을 사용하여 처리)\n",
        "filtered_review = []\n",
        "for review in tqdm(train_review, desc=\"리뷰 처리 중\"):\n",
        "    review = review.lower()\n",
        "    review = re.sub(r'[^가-힣\\s]', '', review)\n",
        "    words = review.split()\n",
        "\n",
        "    # numpy 배열을 사용하여 불용어를 필터링합니다. 이 경우, 리스트 컴프리헨션을 사용하는 것이 더 적합합니다.\n",
        "    filtered_words = ' '.join([word for word in words if word not in stopwords])\n",
        "    filtered_review.append(filtered_words)\n",
        "\n",
        "# 다시 numpy 배열로 변환합니다.\n",
        "filtered_review = np.array(filtered_review)\n",
        "\n",
        "# 워드 클라우드 생성 및 출력\n",
        "fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n",
        "wordcloud = WordCloud(font_path=fontpath, background_color='white', width=800, height=800, stopwords=set(stopwords)).generate(' '.join(filtered_review))\n",
        "\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install konlpy\n",
        "!apt-get update\n",
        "!apt-get install g++ openjdk-8-jdk python3-dev python3-pip curl\n",
        "!python3 -m pip install --upgrade pip\n",
        "!python3 -m pip install konlpy\n",
        "!apt-get install curl git\n",
        "!bash <(curl -s https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh)\n"
      ],
      "metadata": {
        "id": "zEvAQVNdLw_-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36a7684f-9d21-40b4-fe0f-dd2f484e9114"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting konlpy\n",
            "  Downloading konlpy-0.6.0-py2.py3-none-any.whl (19.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.4/19.4 MB\u001b[0m \u001b[31m29.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting JPype1>=0.7.0 (from konlpy)\n",
            "  Downloading JPype1-1.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (488 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m488.6/488.6 kB\u001b[0m \u001b[31m31.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n",
            "Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.25.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.0)\n",
            "Installing collected packages: JPype1, konlpy\n",
            "Successfully installed JPype1-1.5.0 konlpy-0.6.0\n",
            "Hit:1 http://archive.ubuntu.com/ubuntu jammy InRelease\n",
            "Get:2 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]\n",
            "Hit:3 http://archive.ubuntu.com/ubuntu jammy-backports InRelease\n",
            "Get:4 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]\n",
            "Get:5 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,626 B]\n",
            "Hit:6 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n",
            "Hit:7 https://ppa.launchpadcontent.net/c2d4u.team/c2d4u4.0+/ubuntu jammy InRelease\n",
            "Get:8 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease [18.1 kB]\n",
            "Hit:9 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n",
            "Hit:10 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n",
            "Get:11 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [2,161 kB]\n",
            "Get:12 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,357 kB]\n",
            "Get:13 http://archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 Packages [61.2 kB]\n",
            "Get:14 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [1,966 kB]\n",
            "Get:15 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [1,641 kB]\n",
            "Get:16 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,081 kB]\n",
            "Get:17 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy/main amd64 Packages [27.7 kB]\n",
            "Fetched 8,547 kB in 7s (1,172 kB/s)\n",
            "Reading package lists... Done\n",
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "g++ is already the newest version (4:11.2.0-1ubuntu1).\n",
            "g++ set to manually installed.\n",
            "curl is already the newest version (7.81.0-1ubuntu1.16).\n",
            "python3-dev is already the newest version (3.10.6-1~22.04).\n",
            "python3-dev set to manually installed.\n",
            "The following additional packages will be installed:\n",
            "  fonts-dejavu-core fonts-dejavu-extra libatk-wrapper-java libatk-wrapper-java-jni libfontenc1\n",
            "  libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin libgtk2.0-common libice-dev librsvg2-common\n",
            "  libsm-dev libxkbfile1 libxt-dev libxtst6 libxxf86dga1 openjdk-8-jdk-headless openjdk-8-jre\n",
            "  openjdk-8-jre-headless python3-setuptools python3-wheel x11-utils\n",
            "Suggested packages:\n",
            "  gvfs libice-doc libsm-doc libxt-doc openjdk-8-demo openjdk-8-source visualvm libnss-mdns\n",
            "  fonts-nanum fonts-ipafont-gothic fonts-ipafont-mincho fonts-wqy-microhei fonts-wqy-zenhei\n",
            "  fonts-indic python-setuptools-doc mesa-utils\n",
            "The following NEW packages will be installed:\n",
            "  fonts-dejavu-core fonts-dejavu-extra libatk-wrapper-java libatk-wrapper-java-jni libfontenc1\n",
            "  libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin libgtk2.0-common libice-dev librsvg2-common\n",
            "  libsm-dev libxkbfile1 libxt-dev libxtst6 libxxf86dga1 openjdk-8-jdk openjdk-8-jdk-headless\n",
            "  openjdk-8-jre openjdk-8-jre-headless python3-pip python3-setuptools python3-wheel x11-utils\n",
            "0 upgraded, 25 newly installed, 0 to remove and 46 not upgraded.\n",
            "Need to get 51.8 MB of archives.\n",
            "After this operation, 178 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu jammy/main amd64 fonts-dejavu-core all 2.37-2build1 [1,041 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu jammy/main amd64 fonts-dejavu-extra all 2.37-2build1 [2,041 kB]\n",
            "Get:3 http://archive.ubuntu.com/ubuntu jammy/main amd64 libfontenc1 amd64 1:1.1.4-1build3 [14.7 kB]\n",
            "Get:4 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxkbfile1 amd64 1:1.1.0-1build3 [71.8 kB]\n",
            "Get:5 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxtst6 amd64 2:1.2.3-1build4 [13.4 kB]\n",
            "Get:6 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxxf86dga1 amd64 2:1.1.5-0ubuntu3 [12.6 kB]\n",
            "Get:7 http://archive.ubuntu.com/ubuntu jammy/main amd64 x11-utils amd64 7.7+5build2 [206 kB]\n",
            "Get:8 http://archive.ubuntu.com/ubuntu jammy/main amd64 libatk-wrapper-java all 0.38.0-5build1 [53.1 kB]\n",
            "Get:9 http://archive.ubuntu.com/ubuntu jammy/main amd64 libatk-wrapper-java-jni amd64 0.38.0-5build1 [49.0 kB]\n",
            "Get:10 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgtk2.0-common all 2.24.33-2ubuntu2 [125 kB]\n",
            "Get:11 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgtk2.0-0 amd64 2.24.33-2ubuntu2 [2,037 kB]\n",
            "Get:12 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgail18 amd64 2.24.33-2ubuntu2 [15.9 kB]\n",
            "Get:13 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgail-common amd64 2.24.33-2ubuntu2 [132 kB]\n",
            "Get:14 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgtk2.0-bin amd64 2.24.33-2ubuntu2 [7,932 B]\n",
            "Get:15 http://archive.ubuntu.com/ubuntu jammy/main amd64 libice-dev amd64 2:1.0.10-1build2 [51.4 kB]\n",
            "Get:16 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 librsvg2-common amd64 2.52.5+dfsg-3ubuntu0.2 [17.7 kB]\n",
            "Get:17 http://archive.ubuntu.com/ubuntu jammy/main amd64 libsm-dev amd64 2:1.2.3-1build2 [18.1 kB]\n",
            "Get:18 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxt-dev amd64 1:1.2.1-1 [396 kB]\n",
            "Get:19 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jre-headless amd64 8u402-ga-2ubuntu1~22.04 [30.8 MB]\n",
            "Get:20 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jre amd64 8u402-ga-2ubuntu1~22.04 [75.5 kB]\n",
            "Get:21 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jdk-headless amd64 8u402-ga-2ubuntu1~22.04 [8,873 kB]\n",
            "Get:22 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jdk amd64 8u402-ga-2ubuntu1~22.04 [4,068 kB]\n",
            "Get:23 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 python3-setuptools all 59.6.0-1.2ubuntu0.22.04.1 [339 kB]\n",
            "Get:24 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 python3-wheel all 0.37.1-2ubuntu0.22.04.1 [32.0 kB]\n",
            "Get:25 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 python3-pip all 22.0.2+dfsg-1ubuntu0.4 [1,305 kB]\n",
            "Fetched 51.8 MB in 1s (56.5 MB/s)\n",
            "Selecting previously unselected package fonts-dejavu-core.\n",
            "(Reading database ... 121753 files and directories currently installed.)\n",
            "Preparing to unpack .../00-fonts-dejavu-core_2.37-2build1_all.deb ...\n",
            "Unpacking fonts-dejavu-core (2.37-2build1) ...\n",
            "Selecting previously unselected package fonts-dejavu-extra.\n",
            "Preparing to unpack .../01-fonts-dejavu-extra_2.37-2build1_all.deb ...\n",
            "Unpacking fonts-dejavu-extra (2.37-2build1) ...\n",
            "Selecting previously unselected package libfontenc1:amd64.\n",
            "Preparing to unpack .../02-libfontenc1_1%3a1.1.4-1build3_amd64.deb ...\n",
            "Unpacking libfontenc1:amd64 (1:1.1.4-1build3) ...\n",
            "Selecting previously unselected package libxkbfile1:amd64.\n",
            "Preparing to unpack .../03-libxkbfile1_1%3a1.1.0-1build3_amd64.deb ...\n",
            "Unpacking libxkbfile1:amd64 (1:1.1.0-1build3) ...\n",
            "Selecting previously unselected package libxtst6:amd64.\n",
            "Preparing to unpack .../04-libxtst6_2%3a1.2.3-1build4_amd64.deb ...\n",
            "Unpacking libxtst6:amd64 (2:1.2.3-1build4) ...\n",
            "Selecting previously unselected package libxxf86dga1:amd64.\n",
            "Preparing to unpack .../05-libxxf86dga1_2%3a1.1.5-0ubuntu3_amd64.deb ...\n",
            "Unpacking libxxf86dga1:amd64 (2:1.1.5-0ubuntu3) ...\n",
            "Selecting previously unselected package x11-utils.\n",
            "Preparing to unpack .../06-x11-utils_7.7+5build2_amd64.deb ...\n",
            "Unpacking x11-utils (7.7+5build2) ...\n",
            "Selecting previously unselected package libatk-wrapper-java.\n",
            "Preparing to unpack .../07-libatk-wrapper-java_0.38.0-5build1_all.deb ...\n",
            "Unpacking libatk-wrapper-java (0.38.0-5build1) ...\n",
            "Selecting previously unselected package libatk-wrapper-java-jni:amd64.\n",
            "Preparing to unpack .../08-libatk-wrapper-java-jni_0.38.0-5build1_amd64.deb ...\n",
            "Unpacking libatk-wrapper-java-jni:amd64 (0.38.0-5build1) ...\n",
            "Selecting previously unselected package libgtk2.0-common.\n",
            "Preparing to unpack .../09-libgtk2.0-common_2.24.33-2ubuntu2_all.deb ...\n",
            "Unpacking libgtk2.0-common (2.24.33-2ubuntu2) ...\n",
            "Selecting previously unselected package libgtk2.0-0:amd64.\n",
            "Preparing to unpack .../10-libgtk2.0-0_2.24.33-2ubuntu2_amd64.deb ...\n",
            "Unpacking libgtk2.0-0:amd64 (2.24.33-2ubuntu2) ...\n",
            "Selecting previously unselected package libgail18:amd64.\n",
            "Preparing to unpack .../11-libgail18_2.24.33-2ubuntu2_amd64.deb ...\n",
            "Unpacking libgail18:amd64 (2.24.33-2ubuntu2) ...\n",
            "Selecting previously unselected package libgail-common:amd64.\n",
            "Preparing to unpack .../12-libgail-common_2.24.33-2ubuntu2_amd64.deb ...\n",
            "Unpacking libgail-common:amd64 (2.24.33-2ubuntu2) ...\n",
            "Selecting previously unselected package libgtk2.0-bin.\n",
            "Preparing to unpack .../13-libgtk2.0-bin_2.24.33-2ubuntu2_amd64.deb ...\n",
            "Unpacking libgtk2.0-bin (2.24.33-2ubuntu2) ...\n",
            "Selecting previously unselected package libice-dev:amd64.\n",
            "Preparing to unpack .../14-libice-dev_2%3a1.0.10-1build2_amd64.deb ...\n",
            "Unpacking libice-dev:amd64 (2:1.0.10-1build2) ...\n",
            "Selecting previously unselected package librsvg2-common:amd64.\n",
            "Preparing to unpack .../15-librsvg2-common_2.52.5+dfsg-3ubuntu0.2_amd64.deb ...\n",
            "Unpacking librsvg2-common:amd64 (2.52.5+dfsg-3ubuntu0.2) ...\n",
            "Selecting previously unselected package libsm-dev:amd64.\n",
            "Preparing to unpack .../16-libsm-dev_2%3a1.2.3-1build2_amd64.deb ...\n",
            "Unpacking libsm-dev:amd64 (2:1.2.3-1build2) ...\n",
            "Selecting previously unselected package libxt-dev:amd64.\n",
            "Preparing to unpack .../17-libxt-dev_1%3a1.2.1-1_amd64.deb ...\n",
            "Unpacking libxt-dev:amd64 (1:1.2.1-1) ...\n",
            "Selecting previously unselected package openjdk-8-jre-headless:amd64.\n",
            "Preparing to unpack .../18-openjdk-8-jre-headless_8u402-ga-2ubuntu1~22.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jre-headless:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "Selecting previously unselected package openjdk-8-jre:amd64.\n",
            "Preparing to unpack .../19-openjdk-8-jre_8u402-ga-2ubuntu1~22.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jre:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "Selecting previously unselected package openjdk-8-jdk-headless:amd64.\n",
            "Preparing to unpack .../20-openjdk-8-jdk-headless_8u402-ga-2ubuntu1~22.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jdk-headless:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "Selecting previously unselected package openjdk-8-jdk:amd64.\n",
            "Preparing to unpack .../21-openjdk-8-jdk_8u402-ga-2ubuntu1~22.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jdk:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "Selecting previously unselected package python3-setuptools.\n",
            "Preparing to unpack .../22-python3-setuptools_59.6.0-1.2ubuntu0.22.04.1_all.deb ...\n",
            "Unpacking python3-setuptools (59.6.0-1.2ubuntu0.22.04.1) ...\n",
            "Selecting previously unselected package python3-wheel.\n",
            "Preparing to unpack .../23-python3-wheel_0.37.1-2ubuntu0.22.04.1_all.deb ...\n",
            "Unpacking python3-wheel (0.37.1-2ubuntu0.22.04.1) ...\n",
            "Selecting previously unselected package python3-pip.\n",
            "Preparing to unpack .../24-python3-pip_22.0.2+dfsg-1ubuntu0.4_all.deb ...\n",
            "Unpacking python3-pip (22.0.2+dfsg-1ubuntu0.4) ...\n",
            "Setting up python3-setuptools (59.6.0-1.2ubuntu0.22.04.1) ...\n",
            "Setting up libice-dev:amd64 (2:1.0.10-1build2) ...\n",
            "Setting up libsm-dev:amd64 (2:1.2.3-1build2) ...\n",
            "Setting up libxtst6:amd64 (2:1.2.3-1build4) ...\n",
            "Setting up libxxf86dga1:amd64 (2:1.1.5-0ubuntu3) ...\n",
            "Setting up python3-wheel (0.37.1-2ubuntu0.22.04.1) ...\n",
            "Setting up libfontenc1:amd64 (1:1.1.4-1build3) ...\n",
            "Setting up libxt-dev:amd64 (1:1.2.1-1) ...\n",
            "Setting up openjdk-8-jre-headless:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/orbd to provide /usr/bin/orbd (orbd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/servertool to provide /usr/bin/servertool (servertool) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/tnameserv to provide /usr/bin/tnameserv (tnameserv) in auto mode\n",
            "Setting up fonts-dejavu-core (2.37-2build1) ...\n",
            "Setting up python3-pip (22.0.2+dfsg-1ubuntu0.4) ...\n",
            "Setting up librsvg2-common:amd64 (2.52.5+dfsg-3ubuntu0.2) ...\n",
            "Setting up fonts-dejavu-extra (2.37-2build1) ...\n",
            "Setting up libgtk2.0-common (2.24.33-2ubuntu2) ...\n",
            "Setting up libxkbfile1:amd64 (1:1.1.0-1build3) ...\n",
            "Setting up libgtk2.0-0:amd64 (2.24.33-2ubuntu2) ...\n",
            "Setting up openjdk-8-jdk-headless:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/clhsdb to provide /usr/bin/clhsdb (clhsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/extcheck to provide /usr/bin/extcheck (extcheck) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/hsdb to provide /usr/bin/hsdb (hsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/idlj to provide /usr/bin/idlj (idlj) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javah to provide /usr/bin/javah (javah) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jhat to provide /usr/bin/jhat (jhat) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jsadebugd to provide /usr/bin/jsadebugd (jsadebugd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/native2ascii to provide /usr/bin/native2ascii (native2ascii) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/schemagen to provide /usr/bin/schemagen (schemagen) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsgen to provide /usr/bin/wsgen (wsgen) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsimport to provide /usr/bin/wsimport (wsimport) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/xjc to provide /usr/bin/xjc (xjc) in auto mode\n",
            "Setting up libgail18:amd64 (2.24.33-2ubuntu2) ...\n",
            "Setting up libgtk2.0-bin (2.24.33-2ubuntu2) ...\n",
            "Setting up x11-utils (7.7+5build2) ...\n",
            "Setting up libatk-wrapper-java (0.38.0-5build1) ...\n",
            "Setting up libgail-common:amd64 (2.24.33-2ubuntu2) ...\n",
            "Setting up libatk-wrapper-java-jni:amd64 (0.38.0-5build1) ...\n",
            "Setting up openjdk-8-jre:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/policytool to provide /usr/bin/policytool (policytool) in auto mode\n",
            "Setting up openjdk-8-jdk:amd64 (8u402-ga-2ubuntu1~22.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/appletviewer to provide /usr/bin/appletviewer (appletviewer) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jconsole to provide /usr/bin/jconsole (jconsole) in auto mode\n",
            "Processing triggers for hicolor-icon-theme (0.17-2) ...\n",
            "Processing triggers for libc-bin (2.35-0ubuntu3.4) ...\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n",
            "\n",
            "Processing triggers for man-db (2.10.2-1) ...\n",
            "Processing triggers for libgdk-pixbuf-2.0-0:amd64 (2.42.8+dfsg-1ubuntu0.2) ...\n",
            "Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n",
            "Requirement already satisfied: pip in /usr/local/lib/python3.10/dist-packages (23.1.2)\n",
            "Collecting pip\n",
            "  Downloading pip-24.0-py3-none-any.whl (2.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m11.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pip\n",
            "  Attempting uninstall: pip\n",
            "    Found existing installation: pip 23.1.2\n",
            "    Uninstalling pip-23.1.2:\n",
            "      Successfully uninstalled pip-23.1.2\n",
            "Successfully installed pip-24.0\n",
            "Requirement already satisfied: konlpy in /usr/local/lib/python3.10/dist-packages (0.6.0)\n",
            "Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.5.0)\n",
            "Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n",
            "Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.25.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.0)\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "curl is already the newest version (7.81.0-1ubuntu1.16).\n",
            "git is already the newest version (1:2.34.1-1ubuntu1.10).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 46 not upgraded.\n",
            "Install mecab-ko\n",
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0\n",
            "100 1381k  100 1381k    0     0   891k      0  0:00:01  0:00:01 --:--:-- 13.4M\n",
            "mecab-0.996-ko-0.9.2/\n",
            "mecab-0.996-ko-0.9.2/example/\n",
            "mecab-0.996-ko-0.9.2/example/example.cpp\n",
            "mecab-0.996-ko-0.9.2/example/example_lattice.cpp\n",
            "mecab-0.996-ko-0.9.2/example/example_lattice.c\n",
            "mecab-0.996-ko-0.9.2/example/example.c\n",
            "mecab-0.996-ko-0.9.2/example/thread_test.cpp\n",
            "mecab-0.996-ko-0.9.2/mecab-config.in\n",
            "mecab-0.996-ko-0.9.2/man/\n",
            "mecab-0.996-ko-0.9.2/man/Makefile.am\n",
            "mecab-0.996-ko-0.9.2/man/mecab.1\n",
            "mecab-0.996-ko-0.9.2/man/Makefile.in\n",
            "mecab-0.996-ko-0.9.2/mecab.iss.in\n",
            "mecab-0.996-ko-0.9.2/config.guess\n",
            "mecab-0.996-ko-0.9.2/README\n",
            "mecab-0.996-ko-0.9.2/COPYING\n",
            "mecab-0.996-ko-0.9.2/CHANGES.md\n",
            "mecab-0.996-ko-0.9.2/README.md\n",
            "mecab-0.996-ko-0.9.2/INSTALL\n",
            "mecab-0.996-ko-0.9.2/config.sub\n",
            "mecab-0.996-ko-0.9.2/configure.in\n",
            "mecab-0.996-ko-0.9.2/swig/\n",
            "mecab-0.996-ko-0.9.2/swig/Makefile\n",
            "mecab-0.996-ko-0.9.2/swig/version.h.in\n",
            "mecab-0.996-ko-0.9.2/swig/version.h\n",
            "mecab-0.996-ko-0.9.2/swig/MeCab.i\n",
            "mecab-0.996-ko-0.9.2/aclocal.m4\n",
            "mecab-0.996-ko-0.9.2/LGPL\n",
            "mecab-0.996-ko-0.9.2/Makefile.am\n",
            "mecab-0.996-ko-0.9.2/configure\n",
            "mecab-0.996-ko-0.9.2/tests/\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/test\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/autolink/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/t9/\n",
            "mecab-0.996-ko-0.9.2/tests/t9/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/t9/ipadic.pl\n",
            "mecab-0.996-ko-0.9.2/tests/t9/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/t9/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/t9/test\n",
            "mecab-0.996-ko-0.9.2/tests/t9/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/t9/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/t9/mkdic.pl\n",
            "mecab-0.996-ko-0.9.2/tests/t9/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/ipa.train\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/ipa.test\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/rewrite.def\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/feature.def\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/cost-train/seed/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/run-eval.sh\n",
            "mecab-0.996-ko-0.9.2/tests/run-cost-train.sh\n",
            "mecab-0.996-ko-0.9.2/tests/Makefile.am\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/test\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/katakana/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/eval/\n",
            "mecab-0.996-ko-0.9.2/tests/eval/answer\n",
            "mecab-0.996-ko-0.9.2/tests/eval/system\n",
            "mecab-0.996-ko-0.9.2/tests/eval/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/test\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/mkdic.pl\n",
            "mecab-0.996-ko-0.9.2/tests/shiin/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/latin/\n",
            "mecab-0.996-ko-0.9.2/tests/latin/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/latin/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/latin/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/latin/test\n",
            "mecab-0.996-ko-0.9.2/tests/latin/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/latin/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/latin/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/test\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/chartype/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/run-dics.sh\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/unk.def\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/dicrc\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/dic.csv\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/test\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/char.def\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/matrix.def\n",
            "mecab-0.996-ko-0.9.2/tests/ngram/test.gld\n",
            "mecab-0.996-ko-0.9.2/tests/Makefile.in\n",
            "mecab-0.996-ko-0.9.2/ltmain.sh\n",
            "mecab-0.996-ko-0.9.2/config.rpath\n",
            "mecab-0.996-ko-0.9.2/config.h.in\n",
            "mecab-0.996-ko-0.9.2/mecabrc.in\n",
            "mecab-0.996-ko-0.9.2/GPL\n",
            "mecab-0.996-ko-0.9.2/Makefile.train\n",
            "mecab-0.996-ko-0.9.2/ChangeLog\n",
            "mecab-0.996-ko-0.9.2/install-sh\n",
            "mecab-0.996-ko-0.9.2/AUTHORS\n",
            "mecab-0.996-ko-0.9.2/doc/\n",
            "mecab-0.996-ko-0.9.2/doc/bindings.html\n",
            "mecab-0.996-ko-0.9.2/doc/posid.html\n",
            "mecab-0.996-ko-0.9.2/doc/unk.html\n",
            "mecab-0.996-ko-0.9.2/doc/learn.html\n",
            "mecab-0.996-ko-0.9.2/doc/format.html\n",
            "mecab-0.996-ko-0.9.2/doc/libmecab.html\n",
            "mecab-0.996-ko-0.9.2/doc/mecab.css\n",
            "mecab-0.996-ko-0.9.2/doc/feature.html\n",
            "mecab-0.996-ko-0.9.2/doc/Makefile.am\n",
            "mecab-0.996-ko-0.9.2/doc/soft.html\n",
            "mecab-0.996-ko-0.9.2/doc/en/\n",
            "mecab-0.996-ko-0.9.2/doc/en/bindings.html\n",
            "mecab-0.996-ko-0.9.2/doc/dic-detail.html\n",
            "mecab-0.996-ko-0.9.2/doc/flow.png\n",
            "mecab-0.996-ko-0.9.2/doc/mecab.html\n",
            "mecab-0.996-ko-0.9.2/doc/index.html\n",
            "mecab-0.996-ko-0.9.2/doc/result.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_a.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/globals_eval.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Tagger-members.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/functions_vars.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/doxygen.css\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_r.gif\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Lattice.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/functions.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Tagger.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/mecab_8h_source.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tabs.css\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/nav_f.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_b.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/globals.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/nav_h.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_h.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Model.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/globals_func.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/closed.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_l.gif\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__path__t-members.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/functions_func.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/globals_type.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Lattice-members.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__node__t.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/namespacemembers_func.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_s.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__dictionary__info__t-members.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/namespacemembers_type.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Model-members.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__dictionary__info__t.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/namespaces.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/namespacemembers.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/namespaceMeCab.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__path__t.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/files.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__node__t-members.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/index.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/annotated.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/globals_defs.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/classes.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/mecab_8h-source.html\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/doxygen.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/tab_b.gif\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/bc_s.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/open.png\n",
            "mecab-0.996-ko-0.9.2/doc/doxygen/mecab_8h.html\n",
            "mecab-0.996-ko-0.9.2/doc/dic.html\n",
            "mecab-0.996-ko-0.9.2/doc/partial.html\n",
            "mecab-0.996-ko-0.9.2/doc/feature.png\n",
            "mecab-0.996-ko-0.9.2/doc/Makefile.in\n",
            "mecab-0.996-ko-0.9.2/missing\n",
            "mecab-0.996-ko-0.9.2/BSD\n",
            "mecab-0.996-ko-0.9.2/NEWS\n",
            "mecab-0.996-ko-0.9.2/mkinstalldirs\n",
            "mecab-0.996-ko-0.9.2/src/\n",
            "mecab-0.996-ko-0.9.2/src/dictionary.h\n",
            "mecab-0.996-ko-0.9.2/src/writer.h\n",
            "mecab-0.996-ko-0.9.2/src/utils.h\n",
            "mecab-0.996-ko-0.9.2/src/string_buffer.cpp\n",
            "mecab-0.996-ko-0.9.2/src/tokenizer.cpp\n",
            "mecab-0.996-ko-0.9.2/src/make.bat\n",
            "mecab-0.996-ko-0.9.2/src/mecab.h\n",
            "mecab-0.996-ko-0.9.2/src/freelist.h\n",
            "mecab-0.996-ko-0.9.2/src/string_buffer.h\n",
            "mecab-0.996-ko-0.9.2/src/learner_tagger.h\n",
            "mecab-0.996-ko-0.9.2/src/dictionary_compiler.cpp\n",
            "mecab-0.996-ko-0.9.2/src/eval.cpp\n",
            "mecab-0.996-ko-0.9.2/src/mecab-system-eval.cpp\n",
            "mecab-0.996-ko-0.9.2/src/darts.h\n",
            "mecab-0.996-ko-0.9.2/src/param.h\n",
            "mecab-0.996-ko-0.9.2/src/char_property.h\n",
            "mecab-0.996-ko-0.9.2/src/learner_node.h\n",
            "mecab-0.996-ko-0.9.2/src/mecab-dict-gen.cpp\n",
            "mecab-0.996-ko-0.9.2/src/mecab-dict-index.cpp\n",
            "mecab-0.996-ko-0.9.2/src/winmain.h\n",
            "mecab-0.996-ko-0.9.2/src/thread.h\n",
            "mecab-0.996-ko-0.9.2/src/context_id.cpp\n",
            "mecab-0.996-ko-0.9.2/src/Makefile.am\n",
            "mecab-0.996-ko-0.9.2/src/connector.h\n",
            "mecab-0.996-ko-0.9.2/src/common.h\n",
            "mecab-0.996-ko-0.9.2/src/dictionary_rewriter.cpp\n",
            "mecab-0.996-ko-0.9.2/src/Makefile.msvc.in\n",
            "mecab-0.996-ko-0.9.2/src/dictionary_rewriter.h\n",
            "mecab-0.996-ko-0.9.2/src/feature_index.h\n",
            "mecab-0.996-ko-0.9.2/src/iconv_utils.cpp\n",
            "mecab-0.996-ko-0.9.2/src/char_property.cpp\n",
            "mecab-0.996-ko-0.9.2/src/mecab-test-gen.cpp\n",
            "mecab-0.996-ko-0.9.2/src/tagger.cpp\n",
            "mecab-0.996-ko-0.9.2/src/mecab-cost-train.cpp\n",
            "mecab-0.996-ko-0.9.2/src/learner.cpp\n",
            "mecab-0.996-ko-0.9.2/src/dictionary.cpp\n",
            "mecab-0.996-ko-0.9.2/src/lbfgs.cpp\n",
            "mecab-0.996-ko-0.9.2/src/ucs.h\n",
            "mecab-0.996-ko-0.9.2/src/writer.cpp\n",
            "mecab-0.996-ko-0.9.2/src/learner_tagger.cpp\n",
            "mecab-0.996-ko-0.9.2/src/lbfgs.h\n",
            "mecab-0.996-ko-0.9.2/src/libmecab.cpp\n",
            "mecab-0.996-ko-0.9.2/src/tokenizer.h\n",
            "mecab-0.996-ko-0.9.2/src/mecab.cpp\n",
            "mecab-0.996-ko-0.9.2/src/utils.cpp\n",
            "mecab-0.996-ko-0.9.2/src/dictionary_generator.cpp\n",
            "mecab-0.996-ko-0.9.2/src/param.cpp\n",
            "mecab-0.996-ko-0.9.2/src/context_id.h\n",
            "mecab-0.996-ko-0.9.2/src/mmap.h\n",
            "mecab-0.996-ko-0.9.2/src/viterbi.h\n",
            "mecab-0.996-ko-0.9.2/src/viterbi.cpp\n",
            "mecab-0.996-ko-0.9.2/src/stream_wrapper.h\n",
            "mecab-0.996-ko-0.9.2/src/feature_index.cpp\n",
            "mecab-0.996-ko-0.9.2/src/nbest_generator.h\n",
            "mecab-0.996-ko-0.9.2/src/ucstable.h\n",
            "mecab-0.996-ko-0.9.2/src/nbest_generator.cpp\n",
            "mecab-0.996-ko-0.9.2/src/iconv_utils.h\n",
            "mecab-0.996-ko-0.9.2/src/connector.cpp\n",
            "mecab-0.996-ko-0.9.2/src/Makefile.in\n",
            "mecab-0.996-ko-0.9.2/src/scoped_ptr.h\n",
            "mecab-0.996-ko-0.9.2/Makefile.in\n",
            "checking for a BSD-compatible install... /usr/bin/install -c\n",
            "checking whether build environment is sane... yes\n",
            "checking for a thread-safe mkdir -p... /usr/bin/mkdir -p\n",
            "checking for gawk... no\n",
            "checking for mawk... mawk\n",
            "checking whether make sets $(MAKE)... yes\n",
            "checking for gcc... gcc\n",
            "checking whether the C compiler works... yes\n",
            "checking for C compiler default output file name... a.out\n",
            "checking for suffix of executables... \n",
            "checking whether we are cross compiling... no\n",
            "checking for suffix of object files... o\n",
            "checking whether we are using the GNU C compiler... yes\n",
            "checking whether gcc accepts -g... yes\n",
            "checking for gcc option to accept ISO C89... none needed\n",
            "checking for style of include used by make... GNU\n",
            "checking dependency style of gcc... none\n",
            "checking for g++... g++\n",
            "checking whether we are using the GNU C++ compiler... yes\n",
            "checking whether g++ accepts -g... yes\n",
            "checking dependency style of g++... none\n",
            "checking how to run the C preprocessor... gcc -E\n",
            "checking for grep that handles long lines and -e... /usr/bin/grep\n",
            "checking for egrep... /usr/bin/grep -E\n",
            "checking whether gcc needs -traditional... no\n",
            "checking whether make sets $(MAKE)... (cached) yes\n",
            "checking build system type... x86_64-unknown-linux-gnu\n",
            "checking host system type... x86_64-unknown-linux-gnu\n",
            "checking how to print strings... printf\n",
            "checking for a sed that does not truncate output... /usr/bin/sed\n",
            "checking for fgrep... /usr/bin/grep -F\n",
            "checking for ld used by gcc... /usr/bin/ld\n",
            "checking if the linker (/usr/bin/ld) is GNU ld... yes\n",
            "checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\n",
            "checking the name lister (/usr/bin/nm -B) interface... BSD nm\n",
            "checking whether ln -s works... yes\n",
            "checking the maximum length of command line arguments... 1572864\n",
            "checking whether the shell understands some XSI constructs... yes\n",
            "checking whether the shell understands \"+=\"... yes\n",
            "checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop\n",
            "checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\n",
            "checking for /usr/bin/ld option to reload object files... -r\n",
            "checking for objdump... objdump\n",
            "checking how to recognize dependent libraries... pass_all\n",
            "checking for dlltool... dlltool\n",
            "checking how to associate runtime and link libraries... printf %s\\n\n",
            "checking for ar... ar\n",
            "checking for archiver @FILE support... @\n",
            "checking for strip... strip\n",
            "checking for ranlib... ranlib\n",
            "checking command to parse /usr/bin/nm -B output from gcc object... ok\n",
            "checking for sysroot... no\n",
            "checking for mt... no\n",
            "checking if : is a manifest tool... no\n",
            "checking for ANSI C header files... yes\n",
            "checking for sys/types.h... yes\n",
            "checking for sys/stat.h... yes\n",
            "checking for stdlib.h... yes\n",
            "checking for string.h... yes\n",
            "checking for memory.h... yes\n",
            "checking for strings.h... yes\n",
            "checking for inttypes.h... yes\n",
            "checking for stdint.h... yes\n",
            "checking for unistd.h... yes\n",
            "checking for dlfcn.h... yes\n",
            "checking for objdir... .libs\n",
            "checking if gcc supports -fno-rtti -fno-exceptions... no\n",
            "checking for gcc option to produce PIC... -fPIC -DPIC\n",
            "checking if gcc PIC flag -fPIC -DPIC works... yes\n",
            "checking if gcc static flag -static works... yes\n",
            "checking if gcc supports -c -o file.o... yes\n",
            "checking if gcc supports -c -o file.o... (cached) yes\n",
            "checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\n",
            "checking whether -lc should be explicitly linked in... no\n",
            "checking dynamic linker characteristics... GNU/Linux ld.so\n",
            "checking how to hardcode library paths into programs... immediate\n",
            "checking whether stripping libraries is possible... yes\n",
            "checking if libtool supports shared libraries... yes\n",
            "checking whether to build shared libraries... yes\n",
            "checking whether to build static libraries... yes\n",
            "checking how to run the C++ preprocessor... g++ -E\n",
            "checking for ld used by g++... /usr/bin/ld -m elf_x86_64\n",
            "checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes\n",
            "checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\n",
            "checking for g++ option to produce PIC... -fPIC -DPIC\n",
            "checking if g++ PIC flag -fPIC -DPIC works... yes\n",
            "checking if g++ static flag -static works... yes\n",
            "checking if g++ supports -c -o file.o... yes\n",
            "checking if g++ supports -c -o file.o... (cached) yes\n",
            "checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\n",
            "checking dynamic linker characteristics... (cached) GNU/Linux ld.so\n",
            "checking how to hardcode library paths into programs... immediate\n",
            "checking for library containing strerror... none required\n",
            "checking whether byte ordering is bigendian... no\n",
            "checking for ld used by GCC... /usr/bin/ld -m elf_x86_64\n",
            "checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes\n",
            "checking for shared library run path origin... done\n",
            "checking for iconv... yes\n",
            "checking for working iconv... yes\n",
            "checking for iconv declaration... \n",
            "         extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\n",
            "checking for ANSI C header files... (cached) yes\n",
            "checking for an ANSI C-conforming const... yes\n",
            "checking whether byte ordering is bigendian... (cached) no\n",
            "checking for string.h... (cached) yes\n",
            "checking for stdlib.h... (cached) yes\n",
            "checking for unistd.h... (cached) yes\n",
            "checking fcntl.h usability... yes\n",
            "checking fcntl.h presence... yes\n",
            "checking for fcntl.h... yes\n",
            "checking for stdint.h... (cached) yes\n",
            "checking for sys/stat.h... (cached) yes\n",
            "checking sys/mman.h usability... yes\n",
            "checking sys/mman.h presence... yes\n",
            "checking for sys/mman.h... yes\n",
            "checking sys/times.h usability... yes\n",
            "checking sys/times.h presence... yes\n",
            "checking for sys/times.h... yes\n",
            "checking for sys/types.h... (cached) yes\n",
            "checking dirent.h usability... yes\n",
            "checking dirent.h presence... yes\n",
            "checking for dirent.h... yes\n",
            "checking ctype.h usability... yes\n",
            "checking ctype.h presence... yes\n",
            "checking for ctype.h... yes\n",
            "checking for sys/types.h... (cached) yes\n",
            "checking io.h usability... no\n",
            "checking io.h presence... no\n",
            "checking for io.h... no\n",
            "checking windows.h usability... no\n",
            "checking windows.h presence... no\n",
            "checking for windows.h... no\n",
            "checking pthread.h usability... yes\n",
            "checking pthread.h presence... yes\n",
            "checking for pthread.h... yes\n",
            "checking for off_t... yes\n",
            "checking for size_t... yes\n",
            "checking size of char... 1\n",
            "checking size of short... 2\n",
            "checking size of int... 4\n",
            "checking size of long... 8\n",
            "checking size of long long... 8\n",
            "checking size of size_t... 8\n",
            "checking for size_t... (cached) yes\n",
            "checking for unsigned long long int... yes\n",
            "checking for stdlib.h... (cached) yes\n",
            "checking for unistd.h... (cached) yes\n",
            "checking for sys/param.h... yes\n",
            "checking for getpagesize... yes\n",
            "checking for working mmap... yes\n",
            "checking for main in -lstdc++... yes\n",
            "checking for pthread_create in -lpthread... yes\n",
            "checking for pthread_join in -lpthread... yes\n",
            "checking for getenv... yes\n",
            "checking for opendir... yes\n",
            "checking whether make is GNU Make... yes\n",
            "checking if g++ supports stl <vector> (required)... yes\n",
            "checking if g++ supports stl <list> (required)... yes\n",
            "checking if g++ supports stl <map> (required)... yes\n",
            "checking if g++ supports stl <set> (required)... yes\n",
            "checking if g++ supports stl <queue> (required)... yes\n",
            "checking if g++ supports stl <functional> (required)... yes\n",
            "checking if g++ supports stl <algorithm> (required)... yes\n",
            "checking if g++ supports stl <string> (required)... yes\n",
            "checking if g++ supports stl <iostream> (required)... yes\n",
            "checking if g++ supports stl <sstream> (required)... yes\n",
            "checking if g++ supports stl <fstream> (required)... yes\n",
            "checking if g++ supports template <class T> (required)... yes\n",
            "checking if g++ supports const_cast<> (required)... yes\n",
            "checking if g++ supports static_cast<> (required)... yes\n",
            "checking if g++ supports reinterpret_cast<> (required)... yes\n",
            "checking if g++ supports namespaces (required) ... yes\n",
            "checking if g++ supports __thread (optional)... yes\n",
            "checking if g++ supports template <class T> (required)... yes\n",
            "checking if g++ supports GCC native atomic operations (optional)... yes\n",
            "checking if g++ supports OSX native atomic operations (optional)... no\n",
            "checking if g++ environment provides all required features... yes\n",
            "configure: creating ./config.status\n",
            "config.status: creating Makefile\n",
            "config.status: creating src/Makefile\n",
            "config.status: creating src/Makefile.msvc\n",
            "config.status: creating man/Makefile\n",
            "config.status: creating doc/Makefile\n",
            "config.status: creating tests/Makefile\n",
            "config.status: creating swig/version.h\n",
            "config.status: creating mecab.iss\n",
            "config.status: creating mecab-config\n",
            "config.status: creating mecabrc\n",
            "config.status: creating config.h\n",
            "config.status: executing depfiles commands\n",
            "config.status: executing libtool commands\n",
            "config.status: executing default commands\n",
            "make  all-recursive\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "Making all in src\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o viterbi.lo viterbi.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c viterbi.cpp  -fPIC -DPIC -o .libs/viterbi.o\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kviterbi.cpp:18\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kviterbi.cpp:18\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::connect(size_t, MeCab::Node*, MeCab::Node**, MeCab::Node**, const MeCab::Connector*, MeCab::Allocator<mecab_node_t, mecab_path_t>*)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kviterbi.cpp:321:19:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  321 |     register long \u001b[01;35m\u001b[Kbest_cost\u001b[m\u001b[K = 2147483647;\n",
            "      |                   \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:324:20:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  324 |       register int \u001b[01;35m\u001b[Klcost\u001b[m\u001b[K = connector->cost(lnode, rnode);  // local cost\n",
            "      |                    \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:325:21:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  325 |       register long \u001b[01;35m\u001b[Kcost\u001b[m\u001b[K = lnode->cost + lcost;\n",
            "      |                     \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kviterbi.cpp:18\u001b[m\u001b[K:\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "viterbi.cpp: In instantiation of ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::connect(size_t, MeCab::Node*, MeCab::Node**, MeCab::Node**, const MeCab::Connector*, MeCab::Allocator<mecab_node_t, mecab_path_t>*) [with bool IsAllPath = true; size_t = long unsigned int; MeCab::Node = mecab_node_t]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kviterbi.cpp:379:30:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kbool MeCab::Viterbi::viterbi(MeCab::Lattice*) const [with bool IsAllPath = true; bool IsPartial = true]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kviterbi.cpp:84:35:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kviterbi.cpp:321:19:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  321 |     register long \u001b[01;35m\u001b[Kbest_cost\u001b[m\u001b[K = 2147483647;\n",
            "      |                   \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:324:20:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  324 |       register int \u001b[01;35m\u001b[Klcost\u001b[m\u001b[K = connector->cost(lnode, rnode);  // local cost\n",
            "      |                    \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:325:21:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  325 |       register long \u001b[01;35m\u001b[Kcost\u001b[m\u001b[K = lnode->cost + lcost;\n",
            "      |                     \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "viterbi.cpp: In instantiation of ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::connect(size_t, MeCab::Node*, MeCab::Node**, MeCab::Node**, const MeCab::Connector*, MeCab::Allocator<mecab_node_t, mecab_path_t>*) [with bool IsAllPath = false; size_t = long unsigned int; MeCab::Node = mecab_node_t]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kviterbi.cpp:379:30:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kbool MeCab::Viterbi::viterbi(MeCab::Lattice*) const [with bool IsAllPath = false; bool IsPartial = true]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kviterbi.cpp:91:36:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kviterbi.cpp:321:19:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  321 |     register long \u001b[01;35m\u001b[Kbest_cost\u001b[m\u001b[K = 2147483647;\n",
            "      |                   \u001b[01;35m\u001b[K^~~~~~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:324:20:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  324 |       register int \u001b[01;35m\u001b[Klcost\u001b[m\u001b[K = connector->cost(lnode, rnode);  // local cost\n",
            "      |                    \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kviterbi.cpp:325:21:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  325 |       register long \u001b[01;35m\u001b[Kcost\u001b[m\u001b[K = lnode->cost + lcost;\n",
            "      |                     \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kviterbi.cpp:14\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kparam.h:\u001b[m\u001b[K At global scope:\n",
            "\u001b[01m\u001b[Kparam.h:30:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[KTarget {anonymous}::lexical_cast(Source) [with Target = std::__cxx11::basic_string<char>; Source = std::__cxx11::basic_string<char>]\u001b[m\u001b[K’ defined but not used [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-function\u0007-Wunused-function\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   30 | std::string \u001b[01;35m\u001b[Klexical_cast<std::string, std::string>\u001b[m\u001b[K(std::string arg) {\n",
            "      |             \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c viterbi.cpp -o viterbi.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o tagger.lo tagger.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tagger.cpp  -fPIC -DPIC -o .libs/tagger.o\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktagger.cpp:18\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktagger.cpp:18\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktagger.cpp:18\u001b[m\u001b[K:\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tagger.cpp -o tagger.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o utils.lo utils.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c utils.cpp  -fPIC -DPIC -o .libs/utils.o\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c utils.cpp -o utils.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o eval.lo eval.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c eval.cpp  -fPIC -DPIC -o .libs/eval.o\n",
            "In file included from \u001b[01m\u001b[K/usr/include/string.h:535\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K/usr/include/c++/11/cstring:42\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kcommon.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Keval.cpp:11\u001b[m\u001b[K:\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kstatic bool MeCab::Eval::parseLevel(const char*, std::vector<int>*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Keval.cpp:63:17\u001b[m\u001b[K,\n",
            "    inlined from ‘\u001b[01m\u001b[Kstatic bool MeCab::Eval::eval(int, char**)\u001b[m\u001b[K’ at \u001b[01m\u001b[Keval.cpp:134:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c eval.cpp -o eval.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o iconv_utils.lo iconv_utils.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c iconv_utils.cpp  -fPIC -DPIC -o .libs/iconv_utils.o\n",
            "In file included from \u001b[01m\u001b[Kiconv_utils.cpp:18\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c iconv_utils.cpp -o iconv_utils.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary_rewriter.lo dictionary_rewriter.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_rewriter.cpp  -fPIC -DPIC -o .libs/dictionary_rewriter.o\n",
            "In file included from \u001b[01m\u001b[K/usr/include/string.h:535\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K/usr/include/c++/11/cstring:42\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kdictionary_rewriter.cpp:6\u001b[m\u001b[K:\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool {anonymous}::match_rewrite_pattern(const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kdictionary_rewriter.cpp:47:17\u001b[m\u001b[K,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::RewritePattern::rewrite(size_t, const char**, std::string*) const\u001b[m\u001b[K’ at \u001b[01m\u001b[Kdictionary_rewriter.cpp:81:31\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::RewritePattern::set_pattern(const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kdictionary_rewriter.cpp:67:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::RewritePattern::set_pattern(const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kdictionary_rewriter.cpp:70:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_rewriter.cpp -o dictionary_rewriter.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary_generator.lo dictionary_generator.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_generator.cpp  -fPIC -DPIC -o .libs/dictionary_generator.o\n",
            "In file included from \u001b[01m\u001b[Kdictionary_generator.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kdictionary_generator.cpp:14\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_generator.cpp -o dictionary_generator.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary_compiler.lo dictionary_compiler.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_compiler.cpp  -fPIC -DPIC -o .libs/dictionary_compiler.o\n",
            "In file included from \u001b[01m\u001b[Kdictionary_compiler.cpp:9\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kdictionary_compiler.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_compiler.cpp -o dictionary_compiler.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o context_id.lo context_id.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c context_id.cpp  -fPIC -DPIC -o .libs/context_id.o\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c context_id.cpp -o context_id.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o connector.lo connector.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c connector.cpp  -fPIC -DPIC -o .libs/connector.o\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c connector.cpp -o connector.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o nbest_generator.lo nbest_generator.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c nbest_generator.cpp  -fPIC -DPIC -o .libs/nbest_generator.o\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c nbest_generator.cpp -o nbest_generator.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o writer.lo writer.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c writer.cpp  -fPIC -DPIC -o .libs/writer.o\n",
            "In file included from \u001b[01m\u001b[K/usr/include/string.h:535\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K/usr/include/c++/11/cstring:42\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kwriter.cpp:7\u001b[m\u001b[K:\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::Writer::writeNode(MeCab::Lattice*, const char*, const Node*, MeCab::StringBuffer*) const\u001b[m\u001b[K’ at \u001b[01m\u001b[Kwriter.cpp:352:27\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c writer.cpp -o writer.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o string_buffer.lo string_buffer.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c string_buffer.cpp  -fPIC -DPIC -o .libs/string_buffer.o\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c string_buffer.cpp -o string_buffer.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o param.lo param.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c param.cpp  -fPIC -DPIC -o .libs/param.o\n",
            "In file included from \u001b[01m\u001b[K/usr/include/string.h:535\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K/usr/include/c++/11/cstring:42\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kcommon.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kparam.cpp:8\u001b[m\u001b[K:\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::Param::open(const char*, const MeCab::Option*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kparam.cpp:194:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c param.cpp -o param.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o tokenizer.lo tokenizer.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tokenizer.cpp  -fPIC -DPIC -o .libs/tokenizer.o\n",
            "In file included from \u001b[01m\u001b[Ktokenizer.cpp:8\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.cpp:12\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Ktokenizer.cpp:8\u001b[m\u001b[K:\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/include/string.h:535\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K/usr/include/c++/11/cstring:42\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kcommon.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.cpp:6\u001b[m\u001b[K:\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::partial_match(const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Ktokenizer.cpp:193:15\u001b[m\u001b[K,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::is_valid_node(const MeCab::Lattice*, N*) [with N = mecab_node_t]\u001b[m\u001b[K’ at \u001b[01m\u001b[Ktokenizer.cpp:224:20\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::partial_match(const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Ktokenizer.cpp:194:15\u001b[m\u001b[K,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::{anonymous}::is_valid_node(const MeCab::Lattice*, N*) [with N = mecab_node_t]\u001b[m\u001b[K’ at \u001b[01m\u001b[Ktokenizer.cpp:224:20\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::Tokenizer<N, P>::open(const MeCab::Param&) [with N = mecab_learner_node_t; P = mecab_learner_path_t]\u001b[m\u001b[K’ at \u001b[01m\u001b[Ktokenizer.cpp:123:17\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::Tokenizer<N, P>::open(const MeCab::Param&) [with N = mecab_node_t; P = mecab_path_t]\u001b[m\u001b[K’ at \u001b[01m\u001b[Ktokenizer.cpp:123:17\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 8192 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tokenizer.cpp -o tokenizer.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o char_property.lo char_property.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c char_property.cpp  -fPIC -DPIC -o .libs/char_property.o\n",
            "In file included from \u001b[01m\u001b[Kchar_property.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kchar_property.cpp:\u001b[m\u001b[K In static member function ‘\u001b[01m\u001b[Kstatic bool MeCab::CharProperty::compile(const char*, const char*, const char*)\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.cpp:194:18:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kvoid* memset(void*, int, size_t)\u001b[m\u001b[K’ clearing an object of non-trivial type ‘\u001b[01m\u001b[Kstruct MeCab::CharInfo\u001b[m\u001b[K’; use assignment or value-initialization instead [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wclass-memaccess\u0007-Wclass-memaccess\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  194 |       \u001b[01;35m\u001b[Kstd::memset(&c, 0, sizeof(c))\u001b[m\u001b[K;\n",
            "      |       \u001b[01;35m\u001b[K~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kchar_property.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:16:8:\u001b[m\u001b[K \u001b[01;36m\u001b[Knote: \u001b[m\u001b[K‘\u001b[01m\u001b[Kstruct MeCab::CharInfo\u001b[m\u001b[K’ declared here\n",
            "   16 | struct \u001b[01;36m\u001b[KCharInfo\u001b[m\u001b[K {\n",
            "      |        \u001b[01;36m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c char_property.cpp -o char_property.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary.lo dictionary.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary.cpp  -fPIC -DPIC -o .libs/dictionary.o\n",
            "In file included from \u001b[01m\u001b[Kdictionary.cpp:10\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kdictionary.cpp:12\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary.cpp -o dictionary.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o feature_index.lo feature_index.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c feature_index.cpp  -fPIC -DPIC -o .libs/feature_index.o\n",
            "In file included from \u001b[01m\u001b[Kfeature_index.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kfeature_index.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[K/usr/include/string.h:535\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[K/usr/include/c++/11/cstring:42\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Kfeature_index.cpp:7\u001b[m\u001b[K:\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::FeatureIndex::buildUnigramFeature(MeCab::LearnerPath*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kfeature_index.cpp:337:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 2048 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::FeatureIndex::buildBigramFeature(MeCab::LearnerPath*, const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kfeature_index.cpp:389:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 2048 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "In function ‘\u001b[01m\u001b[Kchar* strncpy(char*, const char*, size_t)\u001b[m\u001b[K’,\n",
            "    inlined from ‘\u001b[01m\u001b[Kbool MeCab::FeatureIndex::buildBigramFeature(MeCab::LearnerPath*, const char*, const char*)\u001b[m\u001b[K’ at \u001b[01m\u001b[Kfeature_index.cpp:390:15\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[K/usr/include/x86_64-linux-gnu/bits/string_fortified.h:95:34:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* __builtin_strncpy(char*, const char*, long unsigned int)\u001b[m\u001b[K’ specified bound 2048 equals destination size [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-truncation\u0007-Wstringop-truncation\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   95 |   return \u001b[01;35m\u001b[K__builtin___strncpy_chk (__dest, __src, __len,\u001b[m\u001b[K\n",
            "      |          \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "   96 | \u001b[01;35m\u001b[K                                  __glibc_objsize (__dest))\u001b[m\u001b[K;\n",
            "      |                                   \u001b[01;35m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c feature_index.cpp -o feature_index.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o lbfgs.lo lbfgs.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c lbfgs.cpp  -fPIC -DPIC -o .libs/lbfgs.o\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c lbfgs.cpp -o lbfgs.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o learner_tagger.lo learner_tagger.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner_tagger.cpp  -fPIC -DPIC -o .libs/learner_tagger.o\n",
            "In file included from \u001b[01m\u001b[Kfeature_index.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.cpp:13\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.cpp:13\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kfeature_index.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.cpp:13\u001b[m\u001b[K:\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Klearner_tagger.cpp:\u001b[m\u001b[K At global scope:\n",
            "\u001b[01m\u001b[Klearner_tagger.cpp:25:7:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K‘\u001b[01m\u001b[Kchar* MeCab::{anonymous}::mystrdup(const string&)\u001b[m\u001b[K’ defined but not used [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-function\u0007-Wunused-function\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   25 | char *\u001b[01;35m\u001b[Kmystrdup\u001b[m\u001b[K(const std::string &str) {\n",
            "      |       \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner_tagger.cpp -o learner_tagger.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o learner.lo learner.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner.cpp  -fPIC -DPIC -o .libs/learner.o\n",
            "In file included from \u001b[01m\u001b[Kfeature_index.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner.cpp:10\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner_tagger.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner.cpp:13\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kfeature_index.h:13\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klearner.cpp:10\u001b[m\u001b[K:\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner.cpp -o learner.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o libmecab.lo libmecab.cpp\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c libmecab.cpp  -fPIC -DPIC -o .libs/libmecab.o\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klibmecab.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[KMeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::value_type MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::traverse(const key_type*, size_t&, size_t&, size_t) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:472:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  472 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:473:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  473 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:12\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klibmecab.cpp:11\u001b[m\u001b[K:\n",
            "\u001b[01m\u001b[Kchar_property.h:\u001b[m\u001b[K In member function ‘\u001b[01m\u001b[Kconst char* MeCab::CharProperty::seekToOtherType(const char*, const char*, MeCab::CharInfo, MeCab::CharInfo*, size_t*, size_t*) const\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kchar_property.h:40:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "   40 |     register const char *\u001b[01;35m\u001b[Kp\u001b[m\u001b[K =  begin;\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "In file included from \u001b[01m\u001b[Kdictionary.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Ktokenizer.h:11\u001b[m\u001b[K,\n",
            "                 from \u001b[01m\u001b[Klibmecab.cpp:11\u001b[m\u001b[K:\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[Ksize_t MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::commonPrefixSearch(const key_type*, T*, size_t, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; size_t = long unsigned int; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdictionary.h:37:34:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:434:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  434 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K   = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:435:25:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  435 |     register size_t     \u001b[01;35m\u001b[Knum\u001b[m\u001b[K = 0;\n",
            "      |                         \u001b[01;35m\u001b[K^~~\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:436:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  436 |     register array_type_  \u001b[01;35m\u001b[Kn\u001b[m\u001b[K;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:437:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  437 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:439:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  439 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "darts.h: In instantiation of ‘\u001b[01m\u001b[KT MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kdarts.h:394:33:\u001b[m\u001b[K   required from ‘\u001b[01m\u001b[Kvoid MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::exactMatchSearch(const key_type*, T&, size_t, size_t) const [with T = MeCab::Darts::DoubleArrayImpl<char, unsigned char, int, unsigned int>::result_pair_type; node_type_ = char; node_u_type_ = unsigned char; array_type_ = int; array_u_type_ = unsigned int; length_func_ = MeCab::Darts::Length<char>; MeCab::Darts::DoubleArrayImpl<node_type_, node_u_type_, array_type_, array_u_type_, length_func_>::key_type = char; size_t = long unsigned int]\u001b[m\u001b[K’\n",
            "\u001b[01m\u001b[Kdictionary.h:42:25:\u001b[m\u001b[K   required from here\n",
            "\u001b[01m\u001b[Kdarts.h:407:27:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  407 |     register array_type_  \u001b[01;35m\u001b[Kb\u001b[m\u001b[K = array_[node_pos].base;\n",
            "      |                           \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:408:28:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  408 |     register array_u_type_ \u001b[01;35m\u001b[Kp\u001b[m\u001b[K;\n",
            "      |                            \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "\u001b[01m\u001b[Kdarts.h:410:26:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[KISO C++17 does not allow ‘\u001b[01m\u001b[Kregister\u001b[m\u001b[K’ storage class specifier [\u001b[01;35m\u001b[K\u001b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wregister\u0007-Wregister\u001b]8;;\u0007\u001b[m\u001b[K]\n",
            "  410 |     for (register size_t \u001b[01;35m\u001b[Ki\u001b[m\u001b[K = 0; i < len; ++i) {\n",
            "      |                          \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n",
            "libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c libmecab.cpp -o libmecab.o >/dev/null 2>&1\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall  -no-undefined -version-info 2:0:0  -o libmecab.la -rpath /usr/local/lib viterbi.lo tagger.lo utils.lo eval.lo iconv_utils.lo dictionary_rewriter.lo dictionary_generator.lo dictionary_compiler.lo context_id.lo connector.lo nbest_generator.lo writer.lo string_buffer.lo param.lo tokenizer.lo char_property.lo dictionary.lo feature_index.lo lbfgs.lo learner_tagger.lo learner.lo libmecab.lo  -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o  .libs/viterbi.o .libs/tagger.o .libs/utils.o .libs/eval.o .libs/iconv_utils.o .libs/dictionary_rewriter.o .libs/dictionary_generator.o .libs/dictionary_compiler.o .libs/context_id.o .libs/connector.o .libs/nbest_generator.o .libs/writer.o .libs/string_buffer.o .libs/param.o .libs/tokenizer.o .libs/char_property.o .libs/dictionary.o .libs/feature_index.o .libs/lbfgs.o .libs/learner_tagger.o .libs/learner.o .libs/libmecab.o   -lpthread -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/local/cuda/lib64/stubs -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.o  -O3   -Wl,-soname -Wl,libmecab.so.2 -o .libs/libmecab.so.2.0.0\n",
            "libtool: link: (cd \".libs\" && rm -f \"libmecab.so.2\" && ln -s \"libmecab.so.2.0.0\" \"libmecab.so.2\")\n",
            "libtool: link: (cd \".libs\" && rm -f \"libmecab.so\" && ln -s \"libmecab.so.2.0.0\" \"libmecab.so\")\n",
            "libtool: link: ar cru .libs/libmecab.a  viterbi.o tagger.o utils.o eval.o iconv_utils.o dictionary_rewriter.o dictionary_generator.o dictionary_compiler.o context_id.o connector.o nbest_generator.o writer.o string_buffer.o param.o tokenizer.o char_property.o dictionary.o feature_index.o lbfgs.o learner_tagger.o learner.o libmecab.o\n",
            "ar: `u' modifier ignored since `D' is the default (see `U')\n",
            "libtool: link: ranlib .libs/libmecab.a\n",
            "libtool: link: ( cd \".libs\" && rm -f \"libmecab.la\" && ln -s \"../libmecab.la\" \"libmecab.la\" )\n",
            "g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab.o mecab.cpp\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab mecab.o libmecab.la -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++ -O3 -Wall -o .libs/mecab mecab.o  ./.libs/libmecab.so -lpthread -lstdc++\n",
            "g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-dict-index.o mecab-dict-index.cpp\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-dict-index mecab-dict-index.o libmecab.la -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++ -O3 -Wall -o .libs/mecab-dict-index mecab-dict-index.o  ./.libs/libmecab.so -lpthread -lstdc++\n",
            "g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-dict-gen.o mecab-dict-gen.cpp\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-dict-gen mecab-dict-gen.o libmecab.la -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++ -O3 -Wall -o .libs/mecab-dict-gen mecab-dict-gen.o  ./.libs/libmecab.so -lpthread -lstdc++\n",
            "g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-cost-train.o mecab-cost-train.cpp\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-cost-train mecab-cost-train.o libmecab.la -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++ -O3 -Wall -o .libs/mecab-cost-train mecab-cost-train.o  ./.libs/libmecab.so -lpthread -lstdc++\n",
            "g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-system-eval.o mecab-system-eval.cpp\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-system-eval mecab-system-eval.o libmecab.la -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++ -O3 -Wall -o .libs/mecab-system-eval mecab-system-eval.o  ./.libs/libmecab.so -lpthread -lstdc++\n",
            "g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-test-gen.o mecab-test-gen.cpp\n",
            "/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-test-gen mecab-test-gen.o libmecab.la -lpthread -lpthread  -lstdc++ \n",
            "libtool: link: g++ -O3 -Wall -o .libs/mecab-test-gen mecab-test-gen.o  ./.libs/libmecab.so -lpthread -lstdc++\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "Making all in man\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "make[2]: Nothing to be done for 'all'.\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "Making all in doc\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "make[2]: Nothing to be done for 'all'.\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "Making all in tests\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[2]: Nothing to be done for 'all'.\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "Making check in src\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "make[1]: Nothing to be done for 'check'.\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "Making check in man\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "make[1]: Nothing to be done for 'check'.\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "Making check in doc\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "make[1]: Nothing to be done for 'check'.\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "Making check in tests\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make  check-TESTS\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 2\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 177\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./matrix.def ... 178x178\n",
            "emitting matrix      : 100% |###########################################| \n",
            "\n",
            "done!\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 2\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 83\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./matrix.def ... 84x84\n",
            "emitting matrix      : 100% |###########################################| \n",
            "\n",
            "done!\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 2\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 450\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./matrix.def ... 1x1\n",
            "\n",
            "done!\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 2\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 162\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./matrix.def ... 3x3\n",
            "emitting matrix      : 100% |###########################################| \n",
            "\n",
            "done!\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 2\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 4\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./matrix.def ... 1x1\n",
            "\n",
            "done!\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 11\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 1\n",
            "reading ./matrix.def ... 1x1\n",
            "\n",
            "done!\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./unk.def ... 2\n",
            "emitting double-array: 100% |###########################################| \n",
            "./model.def is not found. skipped.\n",
            "./pos-id.def is not found. minimum setting is used\n",
            "reading ./dic.csv ... 1\n",
            "reading ./matrix.def ... 1x1\n",
            "\n",
            "done!\n",
            "PASS: run-dics.sh\n",
            "PASS: run-eval.sh\n",
            "seed/pos-id.def is not found. minimum setting is used\n",
            "reading seed/unk.def ... 40\n",
            "emitting double-array: 100% |###########################################| \n",
            "seed/model.def is not found. skipped.\n",
            "seed/pos-id.def is not found. minimum setting is used\n",
            "reading seed/dic.csv ... 4335\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading seed/matrix.def ... 1x1\n",
            "\n",
            "done!\n",
            "reading corpus ...\n",
            "Number of sentences: 34\n",
            "Number of features:  64108\n",
            "eta:                 0.00005\n",
            "freq:                1\n",
            "eval-size:           6\n",
            "unk-eval-size:       4\n",
            "threads:             1\n",
            "charset:             EUC-JP\n",
            "C(sigma^2):          1.00000\n",
            "\n",
            "iter=0 err=1.00000 F=0.35771 target=2406.28355 diff=1.00000\n",
            "iter=1 err=0.97059 F=0.65652 target=1484.25231 diff=0.38318\n",
            "iter=2 err=0.91176 F=0.79331 target=863.32765 diff=0.41834\n",
            "iter=3 err=0.85294 F=0.89213 target=596.72480 diff=0.30881\n",
            "iter=4 err=0.61765 F=0.95467 target=336.30744 diff=0.43641\n",
            "iter=5 err=0.50000 F=0.96702 target=246.53039 diff=0.26695\n",
            "iter=6 err=0.35294 F=0.95472 target=188.93963 diff=0.23361\n",
            "iter=7 err=0.20588 F=0.99106 target=168.62665 diff=0.10751\n",
            "iter=8 err=0.05882 F=0.99777 target=158.64865 diff=0.05917\n",
            "iter=9 err=0.08824 F=0.99665 target=154.14530 diff=0.02839\n",
            "iter=10 err=0.08824 F=0.99665 target=151.94257 diff=0.01429\n",
            "iter=11 err=0.02941 F=0.99888 target=147.20825 diff=0.03116\n",
            "iter=12 err=0.00000 F=1.00000 target=147.34956 diff=0.00096\n",
            "iter=13 err=0.02941 F=0.99888 target=146.32592 diff=0.00695\n",
            "iter=14 err=0.00000 F=1.00000 target=145.77299 diff=0.00378\n",
            "iter=15 err=0.02941 F=0.99888 target=145.24641 diff=0.00361\n",
            "iter=16 err=0.00000 F=1.00000 target=144.96490 diff=0.00194\n",
            "iter=17 err=0.02941 F=0.99888 target=144.90246 diff=0.00043\n",
            "iter=18 err=0.00000 F=1.00000 target=144.75959 diff=0.00099\n",
            "iter=19 err=0.00000 F=1.00000 target=144.71727 diff=0.00029\n",
            "iter=20 err=0.00000 F=1.00000 target=144.66337 diff=0.00037\n",
            "iter=21 err=0.00000 F=1.00000 target=144.61349 diff=0.00034\n",
            "iter=22 err=0.00000 F=1.00000 target=144.62987 diff=0.00011\n",
            "iter=23 err=0.00000 F=1.00000 target=144.60060 diff=0.00020\n",
            "iter=24 err=0.00000 F=1.00000 target=144.59125 diff=0.00006\n",
            "iter=25 err=0.00000 F=1.00000 target=144.58619 diff=0.00004\n",
            "iter=26 err=0.00000 F=1.00000 target=144.58219 diff=0.00003\n",
            "iter=27 err=0.00000 F=1.00000 target=144.58059 diff=0.00001\n",
            "\n",
            "Done! writing model file ... \n",
            "model-ipadic.c1.0.f1.model is not a binary model. reopen it as text mode...\n",
            "reading seed/unk.def ... 40\n",
            "reading seed/dic.csv ... 4335\n",
            "emitting model-ipadic.c1.0.f1.dic/left-id.def/ model-ipadic.c1.0.f1.dic/right-id.def\n",
            "emitting model-ipadic.c1.0.f1.dic/unk.def ... 40\n",
            "emitting model-ipadic.c1.0.f1.dic/dic.csv ... 4335\n",
            "emitting matrix      : 100% |###########################################| \n",
            "copying seed/char.def to model-ipadic.c1.0.f1.dic/char.def\n",
            "copying seed/rewrite.def to model-ipadic.c1.0.f1.dic/rewrite.def\n",
            "copying seed/dicrc to model-ipadic.c1.0.f1.dic/dicrc\n",
            "copying seed/feature.def to model-ipadic.c1.0.f1.dic/feature.def\n",
            "copying model-ipadic.c1.0.f1.model to model-ipadic.c1.0.f1.dic/model.def\n",
            "\n",
            "done!\n",
            "model-ipadic.c1.0.f1.dic/pos-id.def is not found. minimum setting is used\n",
            "reading model-ipadic.c1.0.f1.dic/unk.def ... 40\n",
            "emitting double-array: 100% |###########################################| \n",
            "model-ipadic.c1.0.f1.dic/pos-id.def is not found. minimum setting is used\n",
            "reading model-ipadic.c1.0.f1.dic/dic.csv ... 4335\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading model-ipadic.c1.0.f1.dic/matrix.def ... 346x346\n",
            "emitting matrix      : 100% |###########################################| \n",
            "\n",
            "done!\n",
            "              precision          recall         F\n",
            "LEVEL 0:    12.8959(57/442) 11.8998(57/479) 12.3779\n",
            "LEVEL 1:    12.2172(54/442) 11.2735(54/479) 11.7264\n",
            "LEVEL 2:    11.7647(52/442) 10.8559(52/479) 11.2921\n",
            "LEVEL 4:    11.7647(52/442) 10.8559(52/479) 11.2921\n",
            "PASS: run-cost-train.sh\n",
            "==================\n",
            "All 3 tests passed\n",
            "==================\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "Making install in src\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "test -z \"/usr/local/lib\" || /usr/bin/mkdir -p \"/usr/local/lib\"\n",
            " /bin/bash ../libtool   --mode=install /usr/bin/install -c   libmecab.la '/usr/local/lib'\n",
            "libtool: install: /usr/bin/install -c .libs/libmecab.so.2.0.0 /usr/local/lib/libmecab.so.2.0.0\n",
            "libtool: install: (cd /usr/local/lib && { ln -s -f libmecab.so.2.0.0 libmecab.so.2 || { rm -f libmecab.so.2 && ln -s libmecab.so.2.0.0 libmecab.so.2; }; })\n",
            "libtool: install: (cd /usr/local/lib && { ln -s -f libmecab.so.2.0.0 libmecab.so || { rm -f libmecab.so && ln -s libmecab.so.2.0.0 libmecab.so; }; })\n",
            "libtool: install: /usr/bin/install -c .libs/libmecab.lai /usr/local/lib/libmecab.la\n",
            "libtool: install: /usr/bin/install -c .libs/libmecab.a /usr/local/lib/libmecab.a\n",
            "libtool: install: chmod 644 /usr/local/lib/libmecab.a\n",
            "libtool: install: ranlib /usr/local/lib/libmecab.a\n",
            "libtool: finish: PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/sbin\" ldconfig -n /usr/local/lib\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n",
            "\n",
            "----------------------------------------------------------------------\n",
            "Libraries have been installed in:\n",
            "   /usr/local/lib\n",
            "\n",
            "If you ever happen to want to link against installed libraries\n",
            "in a given directory, LIBDIR, you must either use libtool, and\n",
            "specify the full pathname of the library, or use the `-LLIBDIR'\n",
            "flag during linking and do at least one of the following:\n",
            "   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable\n",
            "     during execution\n",
            "   - add LIBDIR to the `LD_RUN_PATH' environment variable\n",
            "     during linking\n",
            "   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag\n",
            "   - have your system administrator add LIBDIR to `/etc/ld.so.conf'\n",
            "\n",
            "See any operating system documentation about shared libraries for\n",
            "more information, such as the ld(1) and ld.so(8) manual pages.\n",
            "----------------------------------------------------------------------\n",
            "test -z \"/usr/local/bin\" || /usr/bin/mkdir -p \"/usr/local/bin\"\n",
            "  /bin/bash ../libtool   --mode=install /usr/bin/install -c mecab '/usr/local/bin'\n",
            "libtool: install: /usr/bin/install -c .libs/mecab /usr/local/bin/mecab\n",
            "test -z \"/usr/local/libexec/mecab\" || /usr/bin/mkdir -p \"/usr/local/libexec/mecab\"\n",
            "  /bin/bash ../libtool   --mode=install /usr/bin/install -c mecab-dict-index mecab-dict-gen mecab-cost-train mecab-system-eval mecab-test-gen '/usr/local/libexec/mecab'\n",
            "libtool: install: /usr/bin/install -c .libs/mecab-dict-index /usr/local/libexec/mecab/mecab-dict-index\n",
            "libtool: install: /usr/bin/install -c .libs/mecab-dict-gen /usr/local/libexec/mecab/mecab-dict-gen\n",
            "libtool: install: /usr/bin/install -c .libs/mecab-cost-train /usr/local/libexec/mecab/mecab-cost-train\n",
            "libtool: install: /usr/bin/install -c .libs/mecab-system-eval /usr/local/libexec/mecab/mecab-system-eval\n",
            "libtool: install: /usr/bin/install -c .libs/mecab-test-gen /usr/local/libexec/mecab/mecab-test-gen\n",
            "test -z \"/usr/local/include\" || /usr/bin/mkdir -p \"/usr/local/include\"\n",
            " /usr/bin/install -c -m 644 mecab.h '/usr/local/include'\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n",
            "Making install in man\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "make[2]: Nothing to be done for 'install-exec-am'.\n",
            "test -z \"/usr/local/share/man/man1\" || /usr/bin/mkdir -p \"/usr/local/share/man/man1\"\n",
            " /usr/bin/install -c -m 644 mecab.1 '/usr/local/share/man/man1'\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n",
            "Making install in doc\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "make[2]: Nothing to be done for 'install-exec-am'.\n",
            "make[2]: Nothing to be done for 'install-data-am'.\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n",
            "Making install in tests\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[2]: Nothing to be done for 'install-exec-am'.\n",
            "make[2]: Nothing to be done for 'install-data-am'.\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n",
            "make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "test -z \"/usr/local/bin\" || /usr/bin/mkdir -p \"/usr/local/bin\"\n",
            " /usr/bin/install -c mecab-config '/usr/local/bin'\n",
            "test -z \"/usr/local/etc\" || /usr/bin/mkdir -p \"/usr/local/etc\"\n",
            " /usr/bin/install -c -m 644 mecabrc '/usr/local/etc'\n",
            "make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n",
            "Install mecab-ko-dic\n",
            "Install mecab-ko-dic\n",
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n",
            "100 47.4M  100 47.4M    0     0  40.5M      0  0:00:01  0:00:01 --:--:-- 97.6M\n",
            "mecab-ko-dic-2.1.1-20180720/\n",
            "mecab-ko-dic-2.1.1-20180720/configure\n",
            "mecab-ko-dic-2.1.1-20180720/COPYING\n",
            "mecab-ko-dic-2.1.1-20180720/autogen.sh\n",
            "mecab-ko-dic-2.1.1-20180720/Place-station.csv\n",
            "mecab-ko-dic-2.1.1-20180720/NNG.csv\n",
            "mecab-ko-dic-2.1.1-20180720/README\n",
            "mecab-ko-dic-2.1.1-20180720/EF.csv\n",
            "mecab-ko-dic-2.1.1-20180720/MAG.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Preanalysis.csv\n",
            "mecab-ko-dic-2.1.1-20180720/NNB.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Person-actor.csv\n",
            "mecab-ko-dic-2.1.1-20180720/VV.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Makefile.in\n",
            "mecab-ko-dic-2.1.1-20180720/matrix.def\n",
            "mecab-ko-dic-2.1.1-20180720/EC.csv\n",
            "mecab-ko-dic-2.1.1-20180720/NNBC.csv\n",
            "mecab-ko-dic-2.1.1-20180720/clean\n",
            "mecab-ko-dic-2.1.1-20180720/ChangeLog\n",
            "mecab-ko-dic-2.1.1-20180720/J.csv\n",
            "mecab-ko-dic-2.1.1-20180720/.keep\n",
            "mecab-ko-dic-2.1.1-20180720/feature.def\n",
            "mecab-ko-dic-2.1.1-20180720/Foreign.csv\n",
            "mecab-ko-dic-2.1.1-20180720/XPN.csv\n",
            "mecab-ko-dic-2.1.1-20180720/EP.csv\n",
            "mecab-ko-dic-2.1.1-20180720/NR.csv\n",
            "mecab-ko-dic-2.1.1-20180720/left-id.def\n",
            "mecab-ko-dic-2.1.1-20180720/Place.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Symbol.csv\n",
            "mecab-ko-dic-2.1.1-20180720/dicrc\n",
            "mecab-ko-dic-2.1.1-20180720/NP.csv\n",
            "mecab-ko-dic-2.1.1-20180720/ETM.csv\n",
            "mecab-ko-dic-2.1.1-20180720/IC.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Place-address.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Group.csv\n",
            "mecab-ko-dic-2.1.1-20180720/model.def\n",
            "mecab-ko-dic-2.1.1-20180720/XSN.csv\n",
            "mecab-ko-dic-2.1.1-20180720/INSTALL\n",
            "mecab-ko-dic-2.1.1-20180720/rewrite.def\n",
            "mecab-ko-dic-2.1.1-20180720/Inflect.csv\n",
            "mecab-ko-dic-2.1.1-20180720/configure.ac\n",
            "mecab-ko-dic-2.1.1-20180720/NNP.csv\n",
            "mecab-ko-dic-2.1.1-20180720/CoinedWord.csv\n",
            "mecab-ko-dic-2.1.1-20180720/XSV.csv\n",
            "mecab-ko-dic-2.1.1-20180720/pos-id.def\n",
            "mecab-ko-dic-2.1.1-20180720/Makefile.am\n",
            "mecab-ko-dic-2.1.1-20180720/unk.def\n",
            "mecab-ko-dic-2.1.1-20180720/missing\n",
            "mecab-ko-dic-2.1.1-20180720/VCP.csv\n",
            "mecab-ko-dic-2.1.1-20180720/install-sh\n",
            "mecab-ko-dic-2.1.1-20180720/Hanja.csv\n",
            "mecab-ko-dic-2.1.1-20180720/MAJ.csv\n",
            "mecab-ko-dic-2.1.1-20180720/XSA.csv\n",
            "mecab-ko-dic-2.1.1-20180720/Wikipedia.csv\n",
            "mecab-ko-dic-2.1.1-20180720/tools/\n",
            "mecab-ko-dic-2.1.1-20180720/tools/add-userdic.sh\n",
            "mecab-ko-dic-2.1.1-20180720/tools/mecab-bestn.sh\n",
            "mecab-ko-dic-2.1.1-20180720/tools/convert_for_using_store.sh\n",
            "mecab-ko-dic-2.1.1-20180720/user-dic/\n",
            "mecab-ko-dic-2.1.1-20180720/user-dic/nnp.csv\n",
            "mecab-ko-dic-2.1.1-20180720/user-dic/place.csv\n",
            "mecab-ko-dic-2.1.1-20180720/user-dic/person.csv\n",
            "mecab-ko-dic-2.1.1-20180720/user-dic/README.md\n",
            "mecab-ko-dic-2.1.1-20180720/NorthKorea.csv\n",
            "mecab-ko-dic-2.1.1-20180720/VX.csv\n",
            "mecab-ko-dic-2.1.1-20180720/right-id.def\n",
            "mecab-ko-dic-2.1.1-20180720/VA.csv\n",
            "mecab-ko-dic-2.1.1-20180720/char.def\n",
            "mecab-ko-dic-2.1.1-20180720/NEWS\n",
            "mecab-ko-dic-2.1.1-20180720/MM.csv\n",
            "mecab-ko-dic-2.1.1-20180720/ETN.csv\n",
            "mecab-ko-dic-2.1.1-20180720/AUTHORS\n",
            "mecab-ko-dic-2.1.1-20180720/Person.csv\n",
            "mecab-ko-dic-2.1.1-20180720/XR.csv\n",
            "mecab-ko-dic-2.1.1-20180720/VCN.csv\n",
            "Looking in current directory for macros.\n",
            "configure.ac:2: warning: AM_INIT_AUTOMAKE: two- and three-arguments forms are deprecated.\n",
            "./lib/autoconf/general.m4:2434: AC_DIAGNOSE is expanded from...\n",
            "aclocal.m4:139: AM_INIT_AUTOMAKE is expanded from...\n",
            "configure.ac:2: the top level\n",
            "configure.ac:56: warning: AC_OUTPUT should be used without arguments.\n",
            "configure.ac:56: You should run autoupdate.\n",
            "configure.ac:2: warning: AM_INIT_AUTOMAKE: two- and three-arguments forms are deprecated.  For more info, see:\n",
            "configure.ac:2: https://www.gnu.org/software/automake/manual/automake.html#Modernize-AM_005fINIT_005fAUTOMAKE-invocation\n",
            "checking for a BSD-compatible install... /usr/bin/install -c\n",
            "checking whether build environment is sane... yes\n",
            "/tmp/mecab-ko-dic-2.1.1-20180720/missing: Unknown `--is-lightweight' option\n",
            "Try `/tmp/mecab-ko-dic-2.1.1-20180720/missing --help' for more information\n",
            "configure: WARNING: 'missing' script is too old or missing\n",
            "checking for a race-free mkdir -p... /usr/bin/mkdir -p\n",
            "checking for gawk... no\n",
            "checking for mawk... mawk\n",
            "checking whether make sets $(MAKE)... yes\n",
            "checking whether make supports nested variables... yes\n",
            "checking for mecab-config... /usr/local/bin/mecab-config\n",
            "checking that generated files are newer than configure... done\n",
            "configure: creating ./config.status\n",
            "config.status: creating Makefile\n",
            "/usr/local/lib\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n",
            "\n",
            "/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n",
            "\n",
            "/usr/local/libexec/mecab/mecab-dict-index -d . -o . -f UTF-8 -t UTF-8\n",
            "reading ./unk.def ... 13\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./XR.csv ... 3637\n",
            "reading ./Person-actor.csv ... 99230\n",
            "reading ./MM.csv ... 453\n",
            "reading ./Symbol.csv ... 16\n",
            "reading ./NorthKorea.csv ... 3\n",
            "reading ./XSN.csv ... 124\n",
            "reading ./VCP.csv ... 9\n",
            "reading ./Hanja.csv ... 125750\n",
            "reading ./VX.csv ... 125\n",
            "reading ./NR.csv ... 482\n",
            "reading ./VV.csv ... 7331\n",
            "reading ./ETN.csv ... 14\n",
            "reading ./EP.csv ... 51\n",
            "reading ./VA.csv ... 2360\n",
            "reading ./Foreign.csv ... 11690\n",
            "reading ./XSA.csv ... 19\n",
            "reading ./MAG.csv ... 14242\n",
            "reading ./Group.csv ... 3176\n",
            "reading ./NNB.csv ... 140\n",
            "reading ./Preanalysis.csv ... 5\n",
            "reading ./NNP.csv ... 2371\n",
            "reading ./MAJ.csv ... 240\n",
            "reading ./ETM.csv ... 133\n",
            "reading ./Place-address.csv ... 19301\n",
            "reading ./Wikipedia.csv ... 36762\n",
            "reading ./IC.csv ... 1305\n",
            "reading ./VCN.csv ... 7\n",
            "reading ./XSV.csv ... 23\n",
            "reading ./EF.csv ... 1820\n",
            "reading ./Place-station.csv ... 1145\n",
            "reading ./Inflect.csv ... 44820\n",
            "reading ./Person.csv ... 196459\n",
            "reading ./XPN.csv ... 83\n",
            "reading ./J.csv ... 416\n",
            "reading ./CoinedWord.csv ... 148\n",
            "reading ./EC.csv ... 2547\n",
            "reading ./Place.csv ... 30303\n",
            "reading ./NNBC.csv ... 677\n",
            "reading ./NP.csv ... 342\n",
            "reading ./NNG.csv ... 208524\n",
            "emitting double-array: 100% |###########################################| \n",
            "reading ./matrix.def ... 3822x2693\n",
            "emitting matrix      : 100% |###########################################| \n",
            "\n",
            "done!\n",
            "echo To enable dictionary, rewrite /usr/local/etc/mecabrc as \\\"dicdir = /usr/local/lib/mecab/dic/mecab-ko-dic\\\"\n",
            "To enable dictionary, rewrite /usr/local/etc/mecabrc as \"dicdir = /usr/local/lib/mecab/dic/mecab-ko-dic\"\n",
            "make[1]: Entering directory '/tmp/mecab-ko-dic-2.1.1-20180720'\n",
            "make[1]: Nothing to be done for 'install-exec-am'.\n",
            " /usr/bin/mkdir -p '/usr/local/lib/mecab/dic/mecab-ko-dic'\n",
            " /usr/bin/install -c -m 644 model.bin matrix.bin char.bin sys.dic unk.dic left-id.def right-id.def rewrite.def pos-id.def dicrc '/usr/local/lib/mecab/dic/mecab-ko-dic'\n",
            "make[1]: Leaving directory '/tmp/mecab-ko-dic-2.1.1-20180720'\n",
            "Install mecab-python\n",
            "/tmp /tmp/mecab-ko-dic-2.1.1-20180720\n",
            "Cloning into 'mecab-python-0.996'...\n",
            "Unpacking objects: 100% (17/17), 59.65 KiB | 2.06 MiB/s, done.\n",
            "/tmp/mecab-ko-dic-2.1.1-20180720\n",
            "Processing /tmp/mecab-python-0.996\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mpython setup.py egg_info\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\n",
            "\u001b[1;36mhint\u001b[0m: See above for details.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install konlpy\n",
        "!apt-get update\n",
        "!apt-get install g++ openjdk-8-jdk\n",
        "!pip install --upgrade pip\n",
        "!pip install konlpy\n",
        "!bash <(curl -s https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2cleiV1yvO2K",
        "outputId": "cc941959-d7c4-490a-d86e-103ead421a93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: konlpy in /usr/local/lib/python3.10/dist-packages (0.6.0)\n",
            "Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.5.0)\n",
            "Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n",
            "Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.25.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.0)\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "Hit:1 http://security.ubuntu.com/ubuntu jammy-security InRelease\n",
            "Hit:2 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease\n",
            "Hit:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n",
            "Hit:4 http://archive.ubuntu.com/ubuntu jammy InRelease\n",
            "Hit:5 http://archive.ubuntu.com/ubuntu jammy-updates InRelease\n",
            "Hit:6 http://archive.ubuntu.com/ubuntu jammy-backports InRelease\n",
            "Hit:7 https://ppa.launchpadcontent.net/c2d4u.team/c2d4u4.0+/ubuntu jammy InRelease\n",
            "Hit:8 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n",
            "Hit:9 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n",
            "Hit:10 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n",
            "Reading package lists... Done\n",
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "g++ is already the newest version (4:11.2.0-1ubuntu1).\n",
            "openjdk-8-jdk is already the newest version (8u402-ga-2ubuntu1~22.04).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 46 not upgraded.\n",
            "Requirement already satisfied: pip in /usr/local/lib/python3.10/dist-packages (24.0)\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mRequirement already satisfied: konlpy in /usr/local/lib/python3.10/dist-packages (0.6.0)\n",
            "Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.5.0)\n",
            "Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n",
            "Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.25.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.0)\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mmecab-ko is already installed\n",
            "mecab-ko-dic is already installed\n",
            "Install mecab-python\n",
            "/tmp /content\n",
            "/content\n",
            "Processing /tmp/mecab-python-0.996\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mpython setup.py egg_info\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\n",
            "\u001b[1;36mhint\u001b[0m: See above for details.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from konlpy.tag import Mecab\n",
        "mecab = Mecab()\n",
        "print(mecab.nouns('메캅이 잘 설치되었는지 확인하는 테스트 문장입니다.'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "FYPkqNLFvWO7",
        "outputId": "5f102b9c-e6b3-4ea2-b4e3-bdcb0fc8b306"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "Install MeCab in order to use it: http://konlpy.org/en/latest/install/",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/konlpy/tag/_mecab.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dicpath)\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtagger\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTagger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'-d %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdicpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtagset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%s/data/tagset/mecab.json'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minstallpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'Tagger' is not defined",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-b8d4eaa6ef90>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkonlpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtag\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMecab\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmecab\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMecab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmecab\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnouns\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'메캅이 잘 설치되었는지 확인하는 테스트 문장입니다.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/konlpy/tag/_mecab.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dicpath)\u001b[0m\n\u001b[1;32m     80\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The MeCab dictionary does not exist at \"%s\". Is the dictionary correctly installed?\\nYou can also try entering the dictionary path when initializing the Mecab class: \"Mecab(\\'/some/dic/path\\')\"'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdicpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mNameError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Install MeCab in order to use it: http://konlpy.org/en/latest/install/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Install MeCab in order to use it: http://konlpy.org/en/latest/install/"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "from tqdm import tqdm\n",
        "from konlpy.tag import Mecab\n",
        "\n",
        "!apt -qq -y install fonts-nanum > /dev/null\n",
        "\n",
        "# 형태소 분석기 초기화\n",
        "mecab = Mecab()\n",
        "\n",
        "# 데이터 불러오기\n",
        "train_data = pd.read_csv('/content/drive/MyDrive/boom_final.csv')\n",
        "print('데이터 개수:', len(train_data))\n",
        "\n",
        "# 문자열이 아닌 데이터 제거\n",
        "train_review = train_data['댓글'].dropna().map(str)\n",
        "\n",
        "# 불용어 목록 파일을 불러옵니다.\n",
        "with open('/content/drive/MyDrive/stopword_main.txt', 'r', encoding='utf-8') as f:\n",
        "    stopwords = np.array([line.strip().replace('\\r', '') for line in f.readlines()])\n",
        "\n",
        "# 명사 추출 및 불용어 처리\n",
        "filtered_review = []\n",
        "for review in tqdm(train_review, desc=\"리뷰 처리 중\"):\n",
        "    review = review.lower()\n",
        "    review = re.sub(r'[^가-힣\\s]', '', review)\n",
        "    nouns = mecab.nouns(review)  # 형태소 분석을 통해 명사만 추출\n",
        "\n",
        "    # numpy 배열을 사용하여 불용어를 필터링합니다. 이 경우, 리스트 컴프리헨션을 사용하는 것이 더 적합합니다.\n",
        "    filtered_nouns = ' '.join([noun for noun in nouns if noun not in stopwords])\n",
        "    filtered_review.append(filtered_nouns)\n",
        "\n",
        "# 다시 numpy 배열로 변환합니다.\n",
        "filtered_review = np.array(filtered_review)\n",
        "\n",
        "# 워드 클라우드 생성 및 출력\n",
        "fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n",
        "wordcloud = WordCloud(font_path=fontpath, background_color='white', width=800, height=800, stopwords=set(stopwords)).generate(' '.join(filtered_review))\n",
        "\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "jvglnM_NtRwp",
        "outputId": "d04aff40-26fa-4a3f-c641-d59f9d6ed62a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "WARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "Install MeCab in order to use it: http://konlpy.org/en/latest/install/",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/konlpy/tag/_mecab.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dicpath)\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtagger\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTagger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'-d %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdicpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtagset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%s/data/tagset/mecab.json'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minstallpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'Tagger' is not defined",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-23b2d90f806b>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 형태소 분석기 초기화\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mmecab\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMecab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# 데이터 불러오기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/konlpy/tag/_mecab.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dicpath)\u001b[0m\n\u001b[1;32m     80\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The MeCab dictionary does not exist at \"%s\". Is the dictionary correctly installed?\\nYou can also try entering the dictionary path when initializing the Mecab class: \"Mecab(\\'/some/dic/path\\')\"'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdicpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mNameError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Install MeCab in order to use it: http://konlpy.org/en/latest/install/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Install MeCab in order to use it: http://konlpy.org/en/latest/install/"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.font_manager as fm\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "from tqdm import tqdm\n",
        "\n",
        "!apt -qq -y install fonts-nanum > /dev/null\n",
        "\n",
        "\n",
        "# 데이터 불러오기\n",
        "train_data = pd.read_csv('/content/drive/MyDrive/boom_final.csv')\n",
        "print('데이터 개수:', len(train_data))\n",
        "\n",
        "# 문자열이 아닌 데이터 제거\n",
        "train_review = train_data['댓글'].dropna().map(str)\n",
        "\n",
        "\n",
        "# 문자열이 아닌 데이터를 모두 제거한 후 numpy 배열로 변환합니다.\n",
        "train_review = np.array([review for review in train_data['댓글'] if type(review) is str])\n",
        "\n",
        "# 불용어 목록 파일을 불러옵니다.\n",
        "with open('/content/drive/MyDrive/stopword_main.txt', 'r', encoding='utf-8') as f:\n",
        "    stopwords = np.array([line.strip().replace('\\r', '') for line in f.readlines()])\n",
        "\n",
        "# 불용어를 제거하고, 대소문자 및 특수문자 처리합니다. (리스트 컴프리헨션을 사용하여 처리)\n",
        "filtered_review = []\n",
        "for review in tqdm(train_review, desc=\"리뷰 처리 중\"):\n",
        "    review = review.lower()\n",
        "    review = re.sub(r'[^가-힣\\s]', '', review)\n",
        "    words = review.split()\n",
        "\n",
        "    # numpy 배열을 사용하여 불용어를 필터링합니다. 이 경우, 리스트 컴프리헨션을 사용하는 것이 더 적합합니다.\n",
        "    filtered_words = ' '.join([word for word in words if word not in stopwords])\n",
        "    filtered_review.append(filtered_words)\n",
        "\n",
        "# 다시 numpy 배열로 변환합니다.\n",
        "filtered_review = np.array(filtered_review)\n",
        "\n",
        "# 워드 클라우드 생성 및 출력\n",
        "fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n",
        "wordcloud = WordCloud(font_path=fontpath, background_color='white', width=800, height=800, stopwords=set(stopwords)).generate(' '.join(filtered_review))\n",
        "\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "93k7KoaguDY3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
